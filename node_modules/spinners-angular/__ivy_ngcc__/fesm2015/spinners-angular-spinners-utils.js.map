{"version":3,"file":"spinners-angular-spinners-utils.js","sources":["../../projects/spinners-angular/spinners-utils/src/spinners-angular-utils.ts","../../projects/spinners-angular/spinners-utils/src/spinners-angular-spinners-utils.ts"],"names":[],"mappings":";;;MAGa,gBAAgB;AAC7B,IADA;AAAgB,QACL,UAAK,GAAG,SAAS,CAAC;AAC7B,QAAW,YAAO,GAAG,IAAI,CAAC;AAC1B,QAAW,SAAI,GAAoB,EAAE,CAAC;AACtC,QAAW,UAAK,GAAG,GAAG,CAAC;AACvB,QAAW,UAAK,GAAG,KAAK,CAAC;AACzB,QAAW,WAAM,GAAG,EAAE,CAAC;AACvB,QAAW,cAAS,GAAG,GAAG,CAAC;AAC3B,KAUC;AACD,IAVE,IAAI,QAAQ;AACd,QAAM,uBACI,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,QAAQ,EAAE,SAAS,EACnB,KAAK,EAAE,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,EAC/B,MAAM,EAAE,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,KAC5B,OAAO,IAAI,CAAC,MAAM,KAAK,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,GAC7E;AACR,KAAG;AACH;;mOAAC;AACD;AACmC,oBAnBhC,KAAK;AAAK,sBACV,KAAK;AAAK,mBACV,KAAK;AAAK,oBACV,KAAK;AAAK,oBACV,KAAK;AAAK,qBACV,KAAK;AAAK,wBACV,KAAK;AAAI;AAAE;AAAC,MAaF,kCAAmC,SAAQ,gBAAgB;AACxE,IADA;AAAgB;AAA6B,QAClC,mBAAc,GAAG,kBAAkB,CAAC;AAC/C,KAAC;AACD;;4NACA;AAAC;AAAsD,6BAHpD,KAAK;AAAI;AAAE;AAAC,MAGF,aAAa,GAAG,CAAC,IAAqB,MAC9C,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,QAAQ,EAAE;AAC/D,MAAU,GAAG,IAAI,IAAI;AACrB,MAAU,IAAI,CAAC,QAAQ,EAAE;AACzB;AC/BA;AACA;AACA;AACA;AACA;AACkD","sourcesContent":["import { NgStyle } from '@angular/common';\nimport { Input } from '@angular/core';\n\nexport class SpinnerComponent {\n  @Input() color = '#38ad48';\n  @Input() enabled = true;\n  @Input() size: number | string = 50;\n  @Input() speed = 100;\n  @Input() still = false;\n  @Input() styles = {};\n  @Input() thickness = 100;\n\n  get svgStyle() {\n      return {\n          color: this.color,\n          overflow: 'visible',\n          width: normalizeSize(this.size),\n          height: normalizeSize(this.size),\n          ...(typeof this.styles === 'string' ? JSON.parse(this.styles) : this.styles),\n      };\n  }\n}\n\nexport class SpinnerComponentWithSecondaryColor extends SpinnerComponent {\n  @Input() secondaryColor = 'rgba(0,0,0,0.44)';\n}\n\nexport const normalizeSize = (size: number | string) =>\n    (parseFloat(size.toString()).toString() === size.toString()\n        ? `${size}px`\n        : size.toString());\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}